[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "js/Channel.js",
    "content": "import Mitt from './util/Mitt.js'\n\n/**\n * 양방향 데이터 전송을 위한 인터페이스. RTCSocket을 이용해 데이터를 전송합니다.\n */\nexport default class Channel extends Mitt {\n  /**\n   * 주의: 이 생성자는 RTCEngine 내부에서만 호출되어야 합니다.\n   * @param {RTCSocket} socket 데이터 전송에 사용할 RTCSocket\n   * @param {RTCEngine} engine 이 채널을 생성한 엔진\n   */\n  constructor (socket, engine) {\n    super()\n\n    this.engine = engine\n    this.socket = socket\n    this.socket.on('data', data => this.emit('message', data))\n    this.label = this.socket.dataChannel.label\n    this.filesSent = 0\n\n    this.socket.on('__file-transaction', label => this.receiveTransaction(label))\n  }\n\n  /**\n   * 상대가 파일을 보내기 위해 트렌젝션을 만들었을때 파일을 받기 위한 트렌젝션을 생성하고 `transaction` 이벤트로 알립니다.\n   * @deprecated\n   * @param {string} label 트렌젝션의 식별자\n   */\n  async receiveTransaction (label) {\n    const transaction = await this.engine.readable(label)\n    this.emit('transaction', transaction)\n  }\n\n  /**\n   * 채널을 통해서 데이터를 전송합니다. `File` 데이터를 받으면 새로운 트렌젝션을 만들고 그걸 통해 파일의 데이터를 전송합니다.\n   * 받는쪽에서는 `transaction` 이벤트를 통해 파일을 받을 수 있습니다.\n   * @deprecated\n   * @param {*} data 전송할 데이터. `JSON.stringify()`로 JSON 문자열로 바꿀 수 있거나 `ArrayBuffer`의 타입은 그냥 전송하고, `File`인 경우 새로운 트렌젝션을 만듭니다.\n   * @returns {Promise<Transaction|void>} 파일 전송을 위한 트렌젝션 또는 데이터가 성공적으로 전송되면 resolve하는 promise\n   */\n  async send (data) {\n    if (data instanceof File) {\n      const file = data\n      const label = `file - ${this.filesSent++}`\n      this.socket.writeEvent('__file-transaction', label)\n\n      const transaction = await this.engine.writable(label, {\n        name: file.name,\n        size: file.size\n      })\n\n      file.stream().pipeTo(transaction.stream)\n      return transaction\n    }\n\n    return this.socket.write(data)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/Channel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Channel",
    "memberof": "js/Channel.js",
    "static": true,
    "longname": "js/Channel.js~Channel",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/Channel.js",
    "importStyle": "Channel",
    "description": "양방향 데이터 전송을 위한 인터페이스. RTCSocket을 이용해 데이터를 전송합니다.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "js/util/Mitt.js~Mitt"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/Channel.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Channel.js~Channel#constructor",
    "access": "public",
    "description": "주의: 이 생성자는 RTCEngine 내부에서만 호출되어야 합니다.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "데이터 전송에 사용할 RTCSocket"
      },
      {
        "nullable": null,
        "types": [
          "RTCEngine"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "이 채널을 생성한 엔진"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "engine",
    "memberof": "js/Channel.js~Channel",
    "static": false,
    "longname": "js/Channel.js~Channel#engine",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "socket",
    "memberof": "js/Channel.js~Channel",
    "static": false,
    "longname": "js/Channel.js~Channel#socket",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "label",
    "memberof": "js/Channel.js~Channel",
    "static": false,
    "longname": "js/Channel.js~Channel#label",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "filesSent",
    "memberof": "js/Channel.js~Channel",
    "static": false,
    "longname": "js/Channel.js~Channel#filesSent",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "receiveTransaction",
    "memberof": "js/Channel.js~Channel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/Channel.js~Channel#receiveTransaction",
    "access": "public",
    "description": "상대가 파일을 보내기 위해 트렌젝션을 만들었을때 파일을 받기 위한 트렌젝션을 생성하고 `transaction` 이벤트로 알립니다.",
    "lineNumber": 29,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "트렌젝션의 식별자"
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "send",
    "memberof": "js/Channel.js~Channel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/Channel.js~Channel#send",
    "access": "public",
    "description": "채널을 통해서 데이터를 전송합니다. `File` 데이터를 받으면 새로운 트렌젝션을 만들고 그걸 통해 파일의 데이터를 전송합니다.\n받는쪽에서는 `transaction` 이벤트를 통해 파일을 받을 수 있습니다.",
    "lineNumber": 41,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Transaction|void>} 파일 전송을 위한 트렌젝션 또는 데이터가 성공적으로 전송되면 resolve하는 promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "전송할 데이터. `JSON.stringify()`로 JSON 문자열로 바꿀 수 있거나 `ArrayBuffer`의 타입은 그냥 전송하고, `File`인 경우 새로운 트렌젝션을 만듭니다."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Transaction|void>"
      ],
      "spread": false,
      "description": "파일 전송을 위한 트렌젝션 또는 데이터가 성공적으로 전송되면 resolve하는 promise"
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "js/ChunkProducer.js",
    "content": "class FixedSizeBuffer {\n  constructor (size) {\n    this.size = size\n    this.source = new Uint8Array(size)\n    this.bufferedAmount = 0\n    this.desiredAmount = size\n  }\n\n  consume (source) {\n    const sourceBytes = source.length\n    let consumedBytes\n\n    if (sourceBytes > this.desiredAmount) {\n      this.source.set(source.subarray(0, this.desiredAmount), this.bufferedAmount)\n      consumedBytes = this.desiredAmount\n    } else {\n      this.source.set(source, this.bufferedAmount)\n      consumedBytes = sourceBytes\n    }\n\n    this.bufferedAmount += consumedBytes\n    this.desiredAmount -= consumedBytes\n\n    return consumedBytes\n  }\n\n  flush () {\n    return this.source.slice(0, this.bufferedAmount)\n  }\n\n  get full () {\n    return this.desiredAmount === 0\n  }\n}\n\nexport default class ChunkProducer {\n  constructor (size) {\n    this.size = size\n    this.buffer = new FixedSizeBuffer(this.size)\n  }\n\n  /**\n     *\n     * @param {Uint8Array} chunk\n     * @param {*} controller\n     */\n  transform (chunk, controller) {\n    if (!(chunk instanceof Uint8Array)) {\n      controller.enqueue(chunk)\n    }\n\n    let processedBytes = 0\n    let subarray = chunk\n    while (processedBytes < chunk.length) {\n      processedBytes += this.buffer.consume(subarray)\n      if (this.buffer.full) {\n        controller.enqueue(this.buffer.source)\n        // TODO: FixedSizeBuffer 재사용?\n        this.buffer = new FixedSizeBuffer(this.size)\n        subarray = chunk.subarray(processedBytes)\n      }\n    }\n  }\n\n  flush (controller) {\n    // 마지막 chunk는 사이즈가 일정하지 않음\n    const chunk = this.buffer.flush()\n    if (chunk) {\n      controller.enqueue(chunk)\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/ChunkProducer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "FixedSizeBuffer",
    "memberof": "js/ChunkProducer.js",
    "static": true,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/ChunkProducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "size",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#size",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "source",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#source",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "bufferedAmount",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#bufferedAmount",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "desiredAmount",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#desiredAmount",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "consume",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#consume",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "flush",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#flush",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "get",
    "name": "full",
    "memberof": "js/ChunkProducer.js~FixedSizeBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ChunkProducer.js~FixedSizeBuffer#full",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "class",
    "name": "ChunkProducer",
    "memberof": "js/ChunkProducer.js",
    "static": true,
    "longname": "js/ChunkProducer.js~ChunkProducer",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/ChunkProducer.js",
    "importStyle": "ChunkProducer",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/ChunkProducer.js~ChunkProducer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ChunkProducer.js~ChunkProducer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "size",
    "memberof": "js/ChunkProducer.js~ChunkProducer",
    "static": false,
    "longname": "js/ChunkProducer.js~ChunkProducer#size",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "buffer",
    "memberof": "js/ChunkProducer.js~ChunkProducer",
    "static": false,
    "longname": "js/ChunkProducer.js~ChunkProducer#buffer",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "transform",
    "memberof": "js/ChunkProducer.js~ChunkProducer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ChunkProducer.js~ChunkProducer#transform",
    "access": "public",
    "description": "",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "flush",
    "memberof": "js/ChunkProducer.js~ChunkProducer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ChunkProducer.js~ChunkProducer#flush",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "controller",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "js/RTCSocket.js",
    "content": "import Mitt from './util/Mitt.js'\nimport { ObservableEntry } from './util/ObservableEntry.js'\nimport once from './util/once.js'\nimport createLogger from './util/createLogger.js'\n\n// RTCDataChannel은 실제 버퍼 사이즈를 보여주지 않으나 사이즈를 넘게 데이터가 들어가면 채널이 터져버림\n// 따라서 10MB를 데이터 채널의 버퍼 사이즈로 생각\n// 또 writable 스트림의 버퍼 사이즈로도 사용\nconst DATA_CHANNEL_BUFFER_SIZE = 10 * 1024 * 1024 // 10MB\n\nexport default class RTCSocket extends Mitt {\n  // options - received boolean\n  constructor (dataChannel, options = {}) {\n    super()\n\n    /** @type {RTCDataChannel} */\n    this.dataChannel = dataChannel\n    this.dataChannel.binaryType = 'arraybuffer'\n    this.dataChannel.addEventListener('message', ({ data }) => this.recvData(data))\n    this.dataChannel.addEventListener('close', () => {\n      this.emit('close')\n\n      if (this.closed) return\n\n      // close() 호출 이외의 이유로 닫힌 경우\n      this.ready.set(false)\n      this.logger.log('🚫 상대방에 의해서 소켓이 닫혔습니다.')\n    })\n    this.label = this.dataChannel.label\n\n    // 앞의 메시지가 버퍼 사이즈 문제로 인해 대기 중이라면 이게 true로 설정됨\n    // 뒤의 메시지는 이 속성이 false가 되면 처리됨\n    this.ready = new ObservableEntry(true)\n    this.closed = false\n\n    this.logger = createLogger(`Socket:${this.label}`)\n\n    if (options.received) {\n      this.writeEvent('__received')\n    }\n  }\n\n  async writeEvent (eventName, payload) {\n    this.logger.debug(`커스텀 이벤트 ${eventName} 전송을 요청했습니다. 페이로드:`, payload)\n    return this.write({\n      _channelEngineCustomEvent: true,\n      event: eventName,\n      payload\n    })\n  }\n\n  recvData (msg) {\n    let data\n    if (msg instanceof ArrayBuffer) {\n      data = msg\n      this.logger.debug('이진 데이터를 전송받았습니다. 사이즈:', msg.byteLength)\n    } else {\n      data = JSON.parse(msg)\n      this.logger.debug('데이터를 전송받았습니다.', data)\n    }\n\n    // 커스텀 이벤트 처리\n    if (typeof data === 'object') {\n      if ('_channelEngineCustomEvent' in data) {\n        this.emit(data.event, data.payload)\n        return\n      }\n    }\n\n    this.emit('data', data)\n  }\n\n  /**\n     *\n     * @param {object|string|number|ArrayBuffer} data\n     */\n  async write (data) {\n    let msg\n    if (data instanceof ArrayBuffer) {\n      // 데이터채널 버퍼 관리\n      if (data.byteLength > DATA_CHANNEL_BUFFER_SIZE) {\n        throw new Error('데이터 크기가 데이터 채널의 버퍼 사이즈보다 커서 전송할 수 없습니다.')\n      }\n\n      if (data.byteLength + this.dataChannel.bufferedAmount > DATA_CHANNEL_BUFFER_SIZE) {\n        this.ready.set(false)\n        this.dataChannel.bufferedAmountLowThreshold = DATA_CHANNEL_BUFFER_SIZE - data.byteLength\n        this.logger.debug(`버퍼에 공간이 확보되기를 대기하는 중입니다. 메시지 사이즈: ${data.byteLength}, 버퍼 공간: ${DATA_CHANNEL_BUFFER_SIZE - this.dataChannel.bufferedAmount}`)\n        await once(this.dataChannel, 'bufferedamountlow')\n        this.logger.debug('버퍼에 공간이 확보되었습니다.')\n        this.dataChannel.bufferedAmountLowThreshold = 0\n      }\n\n      msg = data\n      this.logger.debug('이진 데이터를 전송했습니다. 사이즈:', msg.byteLength)\n    } else {\n      msg = JSON.stringify(data)\n      this.logger.debug('데이터를 전송했습니다. ', data)\n    }\n\n    if (this.dataChannel.readyState !== 'open') {\n      await once(this.dataChannel, 'open')\n    }\n\n    this.dataChannel.send(msg)\n    this.ready.set(true)\n  }\n\n  close () {\n    this.dataChannel.close()\n    this.ready.set(false)\n    this.closed = true\n    this.logger.log('🚫 close() 메소드가 호출되서 소켓을 닫았습니다.')\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/RTCSocket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "DATA_CHANNEL_BUFFER_SIZE",
    "memberof": "js/RTCSocket.js",
    "static": true,
    "longname": "js/RTCSocket.js~DATA_CHANNEL_BUFFER_SIZE",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/RTCSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "RTCSocket",
    "memberof": "js/RTCSocket.js",
    "static": true,
    "longname": "js/RTCSocket.js~RTCSocket",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/RTCSocket.js",
    "importStyle": "RTCSocket",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/util/Mitt.js~Mitt"
    ]
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "dataChannel",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#dataChannel",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "RTCDataChannel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "label",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#label",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "ready",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#ready",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "closed",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#closed",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "logger",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#logger",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "writeEvent",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#writeEvent",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "recvData",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#recvData",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "write",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#write",
    "access": "public",
    "description": "",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "string",
          "number",
          "ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "close",
    "memberof": "js/RTCSocket.js~RTCSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/RTCSocket.js~RTCSocket#close",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "js/ReadableTransaction.js",
    "content": "import Transaction from './Transaction.js'\n\nexport default class ReadableTransaction extends Transaction {\n  /**\n   * 트렌젝션을 만듭니다.\n   * @param {RTCSocket} socket 데이터 전송에 사용할 RTCSocket\n   * @param {object} [metadata] 상대에게 전송할 메타데이터. 트렌젝션이 만들어진 후 `metadata` 속성으로 읽을 수 있습니다. Progress Tracking을 사용하려면 `size` 속성이 필요합니다. 그 이외의 속성은 임의로 추가할 수 있습니다.\n   * @param {number} [metadata.size] 바이트로 나타낸 트렌젝션의 크기.\n   */\n  constructor (socket, metadata = {}) {\n    super(socket, metadata)\n\n    this.bufferFullInformed = false\n    this.aborted = false\n    this.canceled = false\n    this.cancelReason = null\n\n    this.stream = new ReadableStream({\n      start: controller => {\n        const isDone = () => this.processed.get() === metadata.size\n\n        socket.on('data', data => {\n          if (!(data instanceof ArrayBuffer)) return\n\n          controller.enqueue(data)\n          this.processed.set(this.processed.get() + data.byteLength)\n\n          if (controller.desiredSize < 0 && !this.bufferFullInformed) {\n            this.bufferFullInformed = true\n            socket.writeEvent('buffer-full')\n            this.logger.debug('ReadableStream 버퍼가 가득 찼습니다. 전송 일시중지를 요청했습니다.')\n          }\n\n          if (isDone()) {\n            socket.close()\n            controller.close()\n            this.done.set(true)\n            this.logger.log('⚡ 전송이 완료되었습니다.')\n          }\n        })\n\n        socket.once('close', () => {\n          this.stopReport()\n          if (this.aborted || isDone()) return\n\n          if (this.canceled) {\n            if (this.cancelReason instanceof Error) {\n              controller.error(this.cancelReason)\n            } else {\n              controller.error('트렌젝션이 Cancel되었습니다. 이유: ' + this.cancelReason)\n            }\n          }\n\n          controller.error(new Error('예상치 못하게 소켓이 닫혔습니다.'))\n        })\n\n        socket.once('abort', errMsg => {\n          this.aborted = true\n          socket.close()\n          controller.error(new Error('상대방이 트렌젝션의 WritableStream을 Abort했습니다.' + errMsg))\n        })\n\n        // writer측에서 일시정지/재개됬을때\n        socket.on('pause', () => {\n          this.logger.debug('상대방이 트렌젝션 일시중지를 요청했습니다.')\n          super.pause()\n        })\n        socket.on('resume', () => {\n          this.logger.debug('상대방이 트렌젝션 재시작을 요청했습니다.')\n          super.resume()\n        })\n      },\n      pull: () => {\n        if (!this.bufferFullInformed) return\n\n        socket.writeEvent('pull')\n        this.bufferFullInformed = false\n        this.logger.debug('ReadableStream 버퍼가 공간이 확보되어서 전송 재개를 요청했습니다.')\n      },\n      cancel: reason => {\n        this.cancel(reason)\n      }\n    }, new ByteLengthQueuingStrategy({ highWaterMark: 10 * 1024 * 1024 /* 10 MB */ }))\n  }\n\n  cancel (reason = '') {\n    this.canceled = true\n    this.cancelReason = reason\n\n    if (reason instanceof Error) {\n      this.socket.writeEvent('cancel', reason.message)\n    } else {\n      this.socket.writeEvent('cancel', reason)\n    }\n\n    this.logger.warn('트렌젝션의 ReadableStream이 Cancel되었습니다. 이유: ', reason)\n  }\n\n  stop () {\n    this.cancel('받는 쪽에서 stop() 메소드를 호출했습니다.')\n  }\n\n  pause () {\n    super.pause()\n    this.socket.writeEvent('pause')\n  }\n\n  resume () {\n    super.resume()\n    this.socket.writeEvent('resume')\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/ReadableTransaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "ReadableTransaction",
    "memberof": "js/ReadableTransaction.js",
    "static": true,
    "longname": "js/ReadableTransaction.js~ReadableTransaction",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/ReadableTransaction.js",
    "importStyle": "ReadableTransaction",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/Transaction.js~Transaction"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#constructor",
    "access": "public",
    "description": "트렌젝션을 만듭니다.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "데이터 전송에 사용할 RTCSocket"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata",
        "description": "상대에게 전송할 메타데이터. 트렌젝션이 만들어진 후 `metadata` 속성으로 읽을 수 있습니다. Progress Tracking을 사용하려면 `size` 속성이 필요합니다. 그 이외의 속성은 임의로 추가할 수 있습니다."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata.size",
        "description": "바이트로 나타낸 트렌젝션의 크기."
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "bufferFullInformed",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#bufferFullInformed",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "aborted",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#aborted",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "canceled",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#canceled",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "cancelReason",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#cancelReason",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "stream",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#stream",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "cancel",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#cancel",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "reason",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "stop",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#stop",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "pause",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#pause",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "resume",
    "memberof": "js/ReadableTransaction.js~ReadableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ReadableTransaction.js~ReadableTransaction#resume",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "js/Transaction.js",
    "content": "import Mitt from './util/Mitt.js'\nimport { ObservableEntry, wait } from './util/ObservableEntry.js'\nimport progressTracker from './util/eta.js'\nimport prettyBytes from './util/prettyBytes.js'\nimport createLogger from './util/createLogger.js'\n\n// /** @typedef {import('./RTCSocket.js').default} RTCSocket */\n\n/**\n * 단방향 데이터 전송을 위한 인터페이스. 한 피어에서 다른 피어로 파일과 같은 데이터를 전송할 때 사용됩니다.\n * `stream` 속성을 통해서 읽거나 쓸 수 있는 스트림을 이용할 수 있습니다.\n * 또, 메타데이터 전송 / 전송 컨트롤(일시정지, 재개, 중단) / 전송 속도 및 진행률 추적등의 기능을 제공합니다.\n * 이 클래스는 보내는 쪽과 받는 쪽에서 공통적으로 사용되는 기능을 구현한 베이스로 실제 파일 전송에 관련된 코드는 ReadableTransaction.js와 WritableTransaction.js에 있습니다.\n */\nexport default class Transaction extends Mitt {\n  /**\n   * 트렌젝션을 만듭니다.\n   * @param {RTCSocket} socket 데이터 전송에 사용할 RTCSocket\n   * @param {object} [metadata] 상대에게 전송할 메타데이터. 트렌젝션이 만들어진 후 `metadata` 속성으로 읽을 수 있습니다. Progress Tracking을 사용하려면 `size` 속성이 필요합니다. 그 이외의 속성은 임의로 추가할 수 있습니다.\n   * @param {number} [metadata.size] 바이트로 나타낸 트렌젝션의 크기.\n   */\n  constructor (socket, metadata = {}) {\n    super()\n\n    /** @type {RTCSocket} */\n    this.socket = socket\n    this.metadata = metadata\n    this.label = this.socket.label\n    this.paused = new ObservableEntry(false)\n    this.done = new ObservableEntry(false)\n\n    // 전송 상태 트레킹\n    this.lastPausedTimestamp = 0\n    this.pausedMilliSeconds = 0\n    this.processed = new ObservableEntry(0) // byte or length\n\n    this.timeout = NaN\n    this.logger = createLogger(`Transaction:${this.label}`)\n\n    this.initProgressTracking()\n  }\n\n  async initProgressTracking () {\n    // size가 설정되어 있지 않다면 progress tracking을 사용하지 않음\n    if (this.metadata === undefined) {\n      this.logger.warn('메타데이터가 undefined입니다. Progress Tracking 기능이 동작하지 않습니다.')\n      return\n    }\n    if (typeof this.metadata.size !== 'number') {\n      this.logger.warn('메타데이터의 size 필드가 숫자가 아니거나 정의되지 않았습니다. Progress Tracking 기능이 동작하지 않습니다.')\n      return\n    }\n\n    await wait(this.processed).toBeChanged()\n\n    // transaction writer 쪽에선 처음 시작부터 속도 측정시\n    // 데이터 채널의 버퍼가 다 차기 전이라 속도가 비정상적으로 빠르게 측정되므로 1초 후 시작\n    await new Promise(resolve => setTimeout(resolve, 1000))\n\n    if (this.done.get()) return\n\n    const processed = this.processed.get()\n    this.progressTracker = progressTracker({\n      min: processed,\n      max: this.metadata.size + processed,\n      historyTimeConstant: 10\n    })\n\n    this.timeout = setInterval(() => {\n      if (this.paused.get()) return\n\n      const timestamp = Date.now() - this.pausedMilliSeconds\n      this.progressTracker.report(this.processed.get(), timestamp)\n\n      const report = {\n        processed: this.processed.get(),\n        progress: this.progress,\n        eta: this.eta,\n        speed: this.speed\n      }\n\n      this.logger.debug('통계 데이터를 생성했습니다.', report)\n      this.emit('report', report)\n    }, 500)\n  }\n\n  get eta () {\n    if (!this.progressTracker) {\n      return NaN\n    }\n\n    if (this.paused.get()) {\n      return Math.round(this.progressTracker.estimate(this.lastPausedTimestamp))\n    }\n\n    if (this.processed.get() === this.metadata.size) {\n      return 0\n    }\n\n    return Math.round(this.progressTracker.estimate(Date.now() - this.pausedMilliSeconds)) // 결과는 초\n  }\n\n  get progress () {\n    return this.processed.get() / this.metadata.size\n  }\n\n  get speed () {\n    if (!this.progressTracker) {\n      return 'NaNB/s'\n    }\n\n    if (this.paused.get()) {\n      return '0B/s'\n    }\n\n    return prettyBytes(this.progressTracker.rate()) + '/s'\n  }\n\n  pause () {\n    this.logger.debug('트렌젝션이 일시중지되었습니다.')\n    this.paused.set(true)\n    this.lastPausedTimestamp = Date.now()\n  }\n\n  resume () {\n    this.logger.debug('트렌젝션이 재시작되었습니다.')\n    this.paused.set(false)\n    this.pausedMilliSeconds += (Date.now() - this.lastPausedTimestamp)\n  }\n\n  stopReport () {\n    this.logger.debug('통계 데이터 생성이 중단되었습니다.')\n    if (isNaN(this.timeout)) return\n    clearInterval(this.timeout)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/Transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "Transaction",
    "memberof": "js/Transaction.js",
    "static": true,
    "longname": "js/Transaction.js~Transaction",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/Transaction.js",
    "importStyle": "Transaction",
    "description": "단방향 데이터 전송을 위한 인터페이스. 한 피어에서 다른 피어로 파일과 같은 데이터를 전송할 때 사용됩니다.\n`stream` 속성을 통해서 읽거나 쓸 수 있는 스트림을 이용할 수 있습니다.\n또, 메타데이터 전송 / 전송 컨트롤(일시정지, 재개, 중단) / 전송 속도 및 진행률 추적등의 기능을 제공합니다.\n이 클래스는 보내는 쪽과 받는 쪽에서 공통적으로 사용되는 기능을 구현한 베이스로 실제 파일 전송에 관련된 코드는 ReadableTransaction.js와 WritableTransaction.js에 있습니다.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "js/util/Mitt.js~Mitt"
    ]
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Transaction.js~Transaction#constructor",
    "access": "public",
    "description": "트렌젝션을 만듭니다.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "데이터 전송에 사용할 RTCSocket"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata",
        "description": "상대에게 전송할 메타데이터. 트렌젝션이 만들어진 후 `metadata` 속성으로 읽을 수 있습니다. Progress Tracking을 사용하려면 `size` 속성이 필요합니다. 그 이외의 속성은 임의로 추가할 수 있습니다."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata.size",
        "description": "바이트로 나타낸 트렌젝션의 크기."
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "socket",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#socket",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "RTCSocket"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "metadata",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#metadata",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "label",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#label",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "paused",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#paused",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "done",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#done",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "lastPausedTimestamp",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#lastPausedTimestamp",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "pausedMilliSeconds",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#pausedMilliSeconds",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "processed",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#processed",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "timeout",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#timeout",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "logger",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#logger",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "initProgressTracking",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/Transaction.js~Transaction#initProgressTracking",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "progressTracker",
    "memberof": "js/Transaction.js~Transaction",
    "static": false,
    "longname": "js/Transaction.js~Transaction#progressTracker",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "get",
    "name": "eta",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Transaction.js~Transaction#eta",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "get",
    "name": "progress",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Transaction.js~Transaction#progress",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "name": "speed",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Transaction.js~Transaction#speed",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "pause",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Transaction.js~Transaction#pause",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "resume",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Transaction.js~Transaction#resume",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "stopReport",
    "memberof": "js/Transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Transaction.js~Transaction#stopReport",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "js/WritableTransaction.js",
    "content": "import Transaction from './Transaction.js'\nimport ChunkProducer from './ChunkProducer.js'\nimport { ObservableEntry, wait, waitAll } from './util/ObservableEntry.js'\n\n// 한번에 큰 arraybuffer를 전송시에도 채널이 터질 수 있음\n// 따라서 데이터를 청크로 끊어서 보내야 함\nconst CHUNK_SIZE = 200 * 1024 // 200KB\n\n/*\n전체 파이프 구조:\nsource -> chunkingStream -> writable --- socket --- readable -> destination\n\n - 전송 완료: writable close 불림 -> socket에서 done 이벤트 발생 -> readable에서 데이터 채널 close 이벤트 기다림 -> 스트림 닫기\n                                  -> 데이터 채널 닫음(done 이벤트와 바이너리 데이터의 전송 순서는 지켜지지 않으므로 readable에서 닫을 수 없음)\n - 보내는 쪽에서 중단할때: writable abort 불림 -> socket에서 abort 이벤트 발생 -> readable에서 에러 발생시키고 소켓 닫음\n - 받는 쪽에서 중단할때:  readable cancel 불림 -> socket에서 cancel 이벤트 발생 -> writable에서 에러 발생시키고 소켓 닫음\n - 일시정지(readable): readable에서 'pause', 'resume' 이벤트 발생 -> writable에서 받아서 흐름 조절\n*/\n\n// /**\n//  * @typedef {import('./RTCSocket.js').default} RTCSocket\n//  */\n\nexport default class WritableTransaction extends Transaction {\n  /**\n   * 트렌젝션을 만듭니다.\n   * @param {RTCSocket} socket 데이터 전송에 사용할 RTCSocket\n   * @param {object} [metadata] 상대에게 전송할 메타데이터. 트렌젝션이 만들어진 후 `metadata` 속성으로 읽을 수 있습니다. Progress Tracking을 사용하려면 `size` 속성이 필요합니다. 그 이외의 속성은 임의로 추가할 수 있습니다.\n   * @param {number} [metadata.size] 바이트로 나타낸 트렌젝션의 크기.\n   */\n  constructor (socket, metadata = {}) {\n    super(socket, metadata)\n\n    this.readableBufferFull = new ObservableEntry(false)\n    this.aborted = false\n    this.canceled = false\n\n    const writable = new WritableStream({\n      start: controller => {\n        const isDone = () => this.processed.get() === metadata.size\n\n        // cancel 이벤트 오면 에러 발생시켜서 스트림을 멈춤\n        socket.once('cancel', errMsg => {\n          this.canceled = true\n          socket.close()\n          controller.error(new Error('상대방이 트렌젝션의 ReadableStream을 Cancel했습니다.' + errMsg))\n        })\n\n        socket.once('close', () => {\n          this.stopReport()\n          if (this.aborted || this.canceled || isDone()) return\n\n          controller.error(new Error('예상치 못하게 소켓이 닫혔습니다.'))\n        })\n\n        // readable측에서 요청하는 pause / resume 이벤트 받기\n        socket.on('pause', () => {\n          this.logger.debug('상대방이 트렌젝션 일시중지를 요청했습니다.')\n          super.pause()\n        })\n        socket.on('resume', () => {\n          this.logger.debug('상대방이 트렌젝션 재시작을 요청했습니다.')\n          super.resume()\n        })\n\n        socket.on('buffer-full', () => {\n          this.logger.debug('상대방의 스트림 버퍼가 가득 찼습니다.')\n          this.readableBufferFull.set(true)\n        })\n        socket.on('pull', () => {\n          this.logger.debug('상대방의 스트림 버퍼에 공간이 확보되었습니다.')\n          this.readableBufferFull.set(false)\n        })\n      },\n      /**\n       * @param {Uint8Array} data\n       */\n      write: async data => {\n        // 일시정지 기능\n        if (this.paused.get() || this.readableBufferFull.get()) {\n          await waitAll(wait => {\n            wait(this.paused).toBe(false)\n            wait(this.readableBufferFull).toBe(false)\n          })\n        }\n\n        await socket.write(data.buffer)\n        await wait(socket.ready).toBe(true)\n\n        this.processed.set(this.processed.get() + data.length)\n      },\n      close: async () => {\n        // 여기는 위 write가 완료되어야 호출되므로 일단 모든 메시지가 데이터 채널의 버퍼로 들어간 상태\n        // 데이터 채널의 버퍼가 비면 닫기(close() 시 버퍼에 있는 메시지는 전송될지 확신할 수 없음)\n        // if (socket.dataChannel.bufferedAmount > 0) {\n        //   console.log(`[Transaction:${this.label}] 소켓이 닫히기를 기다리는 중`)\n        //   socket.dataChannel.bufferedAmountLowThreshold = 0\n        //   await once(socket.dataChannel, 'bufferedamountlow')\n        // }\n\n        // // 전송 완료 이벤트 전달\n        // // ready-to-close 이벤트를 받는 이유: 그냥 닫으면 done 이벤트가 아에 전송이 안되는 경우가 발생\n        // socket.writeEvent('done')\n        // await once(socket, 'ready-to-close')\n\n        // socket.close()\n        this.done.set(true)\n        this.logger.log('⚡ 전송이 완료되었습니다.')\n      },\n      // abort되면 abort 이벤트 전달\n      abort: reason => {\n        this.aborted = true\n\n        if (reason instanceof Error) {\n          socket.writeEvent('abort', reason.message)\n        } else {\n          socket.writeEvent('abort', reason)\n        }\n\n        this.logger.warn('트렌젝션의 WritableStream이 Abort되었습니다. 이유: ', reason)\n      }\n    })\n\n    this.abortController = new AbortController()\n\n    // 이렇게 하면 pipeTo(transactionWriter.stream)처럼 사용 가능\n    // 뒤의 catch()문은 abort시 에러가 두군데에서 발생하는데(여기와 this.stream에 pipeTo 한 부분)\n    // 여기서 에러가 발생하지 않게 하기 위한 것임\n    // eslint-disable-next-line no-undef\n    const chunkingStream = new TransformStream(new ChunkProducer(CHUNK_SIZE))\n    chunkingStream.readable.pipeTo(writable, { signal: this.abortController.signal }).catch(() => {})\n    this.stream = chunkingStream.writable\n  }\n\n  /**\n   * 트렌젝션을 중지합니다.\n   */\n  stop () {\n    // stream의 write 메소드가 resolve 되어야지 abort가 정상적으로 처리됨\n    // 따라서 강제로 상태 업데이트\n    this.paused.set(false)\n    this.readableBufferFull = false\n    this.abortController.abort('보내는 쪽에서 stop() 메소드를 호출했습니다.')\n  }\n\n  pause () {\n    super.pause()\n    this.socket.writeEvent('pause')\n  }\n\n  resume () {\n    super.resume()\n    this.socket.writeEvent('resume')\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/WritableTransaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "CHUNK_SIZE",
    "memberof": "js/WritableTransaction.js",
    "static": true,
    "longname": "js/WritableTransaction.js~CHUNK_SIZE",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/WritableTransaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "class",
    "name": "WritableTransaction",
    "memberof": "js/WritableTransaction.js",
    "static": true,
    "longname": "js/WritableTransaction.js~WritableTransaction",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/WritableTransaction.js",
    "importStyle": "WritableTransaction",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/Transaction.js~Transaction"
    ]
  },
  {
    "__docId__": 134,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#constructor",
    "access": "public",
    "description": "트렌젝션을 만듭니다.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "데이터 전송에 사용할 RTCSocket"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata",
        "description": "상대에게 전송할 메타데이터. 트렌젝션이 만들어진 후 `metadata` 속성으로 읽을 수 있습니다. Progress Tracking을 사용하려면 `size` 속성이 필요합니다. 그 이외의 속성은 임의로 추가할 수 있습니다."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "metadata.size",
        "description": "바이트로 나타낸 트렌젝션의 크기."
      }
    ]
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "readableBufferFull",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#readableBufferFull",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "aborted",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#aborted",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "canceled",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#canceled",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "abortController",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#abortController",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "stream",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#stream",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "stop",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#stop",
    "access": "public",
    "description": "트렌젝션을 중지합니다.",
    "lineNumber": 138,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "pause",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#pause",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "resume",
    "memberof": "js/WritableTransaction.js~WritableTransaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/WritableTransaction.js~WritableTransaction#resume",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "js/index.js",
    "content": "export { default } from './RTCEngine.js'\nexport * from './signaler/index.js'\nexport * from './util/index.js'\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "js/signaler/Base.js",
    "content": "import Mitt from '../util/Mitt.js'\nimport { ObservableEntry } from '../util/ObservableEntry.js'\n\n// /**\n//  * @template T\n//  * @typedef {import('../util/Mitt.js').EventHandler<T>} EventHandler<T>\n//  */\n\n// /**\n//  * @typedef {import('../RTCEngine.js').default} RTCEngine\n//  */\n\n/**\n * 시그널러에 필수적인 기능들을 제공하는 베이스 클래스. 시그널러는 반드시 이 클래스를 확장해야 합니다.\n *\n * 다음과 같은 기능들을 제공합니다:\n *  - 받은 메시지의 `type` 에 해당하는 이벤트를 발생시켜서 메시지를 전달합니다.\n *    이렇게 하면 하나의 이벤트를 발생시키는것보다 효율적으로 코드를 구현할 수 있습니다.\n *  - `type` 이벤트의 핸들러가 없을 경우 핸들러가 추가될때까지 기다렸다가 추가되면 그 핸들러가 전에 받았던 메시지를 모두 처리하도록 합니다.\n *    이렇게 하면 시그널러가 엔진이 생성되기전에 메시지를 받아도 메시지가 정상적으로 엔진에 전달됩니다.\n */\nexport default class SignalerBase extends Mitt {\n  constructor () {\n    super()\n\n    /**\n     * 시그널러가 메시지를 보낼 수 있는 상태인지 나타내는 값.\n     * RTCEngine은 시그널러와 상호작용할 때 항상 이 값이 `true`가 될때까지 기다립니다.\n     */\n    this.ready = new ObservableEntry(false)\n\n    /**\n     * RTCEngine 생성시 적용될 설정값들.\n     * 유저 설정값에 의해서 덮어써질 수 있습니다.\n     */\n    this.options = {}\n\n    /**\n     * 받은 메시지의 `type` 필드에 해당하는 이벤트 리스너가 없으면 여기에 보관됩니다.\n     * @type {Map<string, any[]>}\n     */\n    this.unhandledMsg = new Map()\n  }\n\n  /**\n   * 메시지를 엔진에 전달합니다.\n   * @param {*} msg 받은 메시지\n   */\n  receive (msg) {\n    if (!('type' in msg)) {\n      throw new Error('Received message does not include \\'type\\' field')\n    }\n\n    if (this.all.has(msg.type)) {\n      this.emit(msg.type, msg)\n    } else {\n      // 핸들러가 없다면 unhandledMsg에 보관\n      if (!this.unhandledMsg.has(msg.type)) {\n        this.unhandledMsg.set(msg.type, [])\n      }\n\n      const queuedMsgs = this.unhandledMsg.get(msg.type)\n      queuedMsgs.push(msg)\n    }\n  }\n\n  /**\n   * 특정 `type`의 메시지에 대한 핸들러를 등록합니다.\n   * @param {string} type 받을 메시지의 타입\n   * @param {EventHandler<object>} handler 메시지의 핸들러\n   */\n  on (type, handler) {\n    super.on(type, handler)\n\n    if (!this.unhandledMsg.has(type)) return\n\n    for (const msg of this.unhandledMsg.get(type)) {\n      this.emit(type, msg)\n    }\n    this.unhandledMsg.delete(type)\n  }\n\n  /**\n   * @abstract\n   * @param {*} data 전송할 데이터\n   */\n  send (data) {}\n\n  /**\n   * @abstract\n   * @param {RTCEngine} engine 엔진 인스턴스\n   */\n  start (engine) {}\n\n  /**\n   * @abstract\n   * @param {RTCEngine} engine 엔진 인스턴스\n   */\n  connected (engine) {}\n\n  /**\n   * @abstract\n   * @param {RTCEngine} engine 엔진 인스턴스\n   */\n  disconnected (engine) {}\n\n  /**\n   * @abstract\n   * @param {RTCEngine} engine 엔진 인스턴스\n   */\n  failed (engine) {}\n\n  /**\n   * @abstract\n   * @param {RTCEngine} engine 엔진 인스턴스\n   */\n  close (engine) {}\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/signaler/Base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "class",
    "name": "SignalerBase",
    "memberof": "js/signaler/Base.js",
    "static": true,
    "longname": "js/signaler/Base.js~SignalerBase",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/signaler/Base.js",
    "importStyle": "SignalerBase",
    "description": "시그널러에 필수적인 기능들을 제공하는 베이스 클래스. 시그널러는 반드시 이 클래스를 확장해야 합니다.\n\n다음과 같은 기능들을 제공합니다:\n - 받은 메시지의 `type` 에 해당하는 이벤트를 발생시켜서 메시지를 전달합니다.\n   이렇게 하면 하나의 이벤트를 발생시키는것보다 효율적으로 코드를 구현할 수 있습니다.\n - `type` 이벤트의 핸들러가 없을 경우 핸들러가 추가될때까지 기다렸다가 추가되면 그 핸들러가 전에 받았던 메시지를 모두 처리하도록 합니다.\n   이렇게 하면 시그널러가 엔진이 생성되기전에 메시지를 받아도 메시지가 정상적으로 엔진에 전달됩니다.",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "js/util/Mitt.js~Mitt"
    ]
  },
  {
    "__docId__": 149,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "ready",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#ready",
    "access": "public",
    "description": "시그널러가 메시지를 보낼 수 있는 상태인지 나타내는 값.\nRTCEngine은 시그널러와 상호작용할 때 항상 이 값이 `true`가 될때까지 기다립니다.",
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "options",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#options",
    "access": "public",
    "description": "RTCEngine 생성시 적용될 설정값들.\n유저 설정값에 의해서 덮어써질 수 있습니다.",
    "lineNumber": 36,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "unhandledMsg",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#unhandledMsg",
    "access": "public",
    "description": "받은 메시지의 `type` 필드에 해당하는 이벤트 리스너가 없으면 여기에 보관됩니다.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, any[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "receive",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#receive",
    "access": "public",
    "description": "메시지를 엔진에 전달합니다.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "받은 메시지"
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "on",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#on",
    "access": "public",
    "description": "특정 `type`의 메시지에 대한 핸들러를 등록합니다.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "받을 메시지의 타입"
      },
      {
        "nullable": null,
        "types": [
          "EventHandler<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "메시지의 핸들러"
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "send",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#send",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "전송할 데이터"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "start",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#start",
    "access": "public",
    "description": "",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCEngine"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "엔진 인스턴스"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "connected",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#connected",
    "access": "public",
    "description": "",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCEngine"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "엔진 인스턴스"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "disconnected",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#disconnected",
    "access": "public",
    "description": "",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCEngine"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "엔진 인스턴스"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "failed",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#failed",
    "access": "public",
    "description": "",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCEngine"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "엔진 인스턴스"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "close",
    "memberof": "js/signaler/Base.js~SignalerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/Base.js~SignalerBase#close",
    "access": "public",
    "description": "",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCEngine"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "엔진 인스턴스"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "js/signaler/LocalSignaler.js",
    "content": "import SignalerBase from './Base.js'\nimport IntervalTimer from '../util/IntervalTimer.js'\nimport TimeoutTimer from '../util/TimeoutTimer.js'\n\n/**\n * 한 기기에서 탭끼리 연결하는데 사용할 수 있는 시그널러. `BroadcastChannel`을 이용해 시그널을 주고받습니다.\n */\nexport default class LocalSignaler extends SignalerBase {\n  /**\n   * 연결을 시작합니다.\n   * @param {object} userConfig\n   * @param {number} [userConfig.heartbeatInterval] heartbeat 메시지를 보낼 시간 간격(ms)\n   * @param {number} [userConfig.heartbeatTimeout] 마지막으로 heartbeat 메시지를 받은 후 이 시간(ms)동안 heartbeat 메시지를 받지 못하면 연결이 끊긴걸로 간주합니다.\n   */\n  constructor (userConfig) {\n    super()\n\n    // 설정 합치기\n    this.config = {\n      heartbeatInterval: 1000,\n      heartbeatTimeout: 2000\n    }\n    Object.assign(this.config, userConfig)\n\n    /**\n     * 피어를 구분하는 id. 탭을 두개 열어놓고 한쪽을 새로고침시 재연결하는걸 막기 위해서 도입되었습니다.\n     */\n    this.id = Math.random().toString(36).substring(2)\n\n    /**\n     * 연결되어 있는 sender의 id\n     */\n    this.sender = null\n\n    /**\n     * 통신이 이루어질 BroadcastChannel\n     */\n    this.bc = new BroadcastChannel('broadcast-channel-signaler')\n\n    /**\n     * 설정된 주기마다 heartbeat 메시지를 보내는 타이머\n     */\n    this.sendHeartbeatTimer = new IntervalTimer(() => {\n      const heartbeatMsg = JSON.stringify({ type: 'heartbeat', src: this.id })\n      this.bc.postMessage(heartbeatMsg)\n    }, this.config.heartbeatInterval)\n\n    /**\n     * 설정된 시간 동안 heartbeat를 받지 못하면 연결이 꾾어진 것으로 판정하는 타이머\n     */\n    this.heartbeatTimeoutTimer = new TimeoutTimer(() => {\n      this.ready.set(false)\n    }, this.config.heartbeatTimeout, { autoStart: false })\n\n    // broadcast channel로부터 메시지를 받는 헨들러\n    this.bc.addEventListener('message', evt => {\n      const msg = JSON.parse(evt.data)\n\n      // heartbeat 메시지를 받으면 연결된걸로 간주\n      if (msg.type === 'heartbeat') {\n        this.receiveHeartbeat(msg.src)\n        return\n      }\n\n      // 디버깅을 위해 incoming-msg 이벤트 발생\n      // (heartbeat 메시지는 무시)\n      this.emit('incoming-msg', evt.data)\n\n      // 엔진에 메시지 전달\n      this.receive(msg)\n    })\n  }\n\n  /**\n   * heartbeat timeout을 취소하고 ready를 false로 설정합니다.\n   * @private\n   */\n  receiveHeartbeat (sender) {\n    if (this.sender === null) {\n      // 메시지를 처음 받았을 경우\n      this.sender = sender\n    } else if (sender !== this.sender) {\n      // 보낸 사람의 id가 일치하지 않을 경우\n      return\n    }\n\n    this.ready.set(true)\n    this.heartbeatTimeoutTimer.reset()\n  }\n\n  /**\n   * 상대에게 메시지를 전송합니다.\n   * @param {*} msg 전송할 메시지.\n   */\n  send (msg) {\n    const data = JSON.stringify(msg)\n    this.emit('outgoing-msg', data)\n\n    // postMessage는 JSON으로 바꾸지 않아도 오브젝트를 보낼 수 있지만\n    // RTCSessionDescription을 보내면 오류가 남, 따라서 JSON으로 바꿔줘야 함\n    this.bc.postMessage(data)\n  }\n\n  /**\n   * close 훅. Broadcast Channel을 닫습니다.\n   */\n  close () {\n    this.heartbeatTimeoutTimer.clear()\n    this.sendHeartbeatTimer.clear()\n    this.bc.close()\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/signaler/LocalSignaler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "LocalSignaler",
    "memberof": "js/signaler/LocalSignaler.js",
    "static": true,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/signaler/LocalSignaler.js",
    "importStyle": "LocalSignaler",
    "description": "한 기기에서 탭끼리 연결하는데 사용할 수 있는 시그널러. `BroadcastChannel`을 이용해 시그널을 주고받습니다.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "js/signaler/Base.js~SignalerBase"
    ]
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#constructor",
    "access": "public",
    "description": "연결을 시작합니다.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userConfig",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "userConfig.heartbeatInterval",
        "description": "heartbeat 메시지를 보낼 시간 간격(ms)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "userConfig.heartbeatTimeout",
        "description": "마지막으로 heartbeat 메시지를 받은 후 이 시간(ms)동안 heartbeat 메시지를 받지 못하면 연결이 끊긴걸로 간주합니다."
      }
    ]
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "config",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#config",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"heartbeatInterval\": number, \"heartbeatTimeout\": number}"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "id",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#id",
    "access": "public",
    "description": "피어를 구분하는 id. 탭을 두개 열어놓고 한쪽을 새로고침시 재연결하는걸 막기 위해서 도입되었습니다.",
    "lineNumber": 28,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "sender",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#sender",
    "access": "public",
    "description": "연결되어 있는 sender의 id",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "bc",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#bc",
    "access": "public",
    "description": "통신이 이루어질 BroadcastChannel",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "sendHeartbeatTimer",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#sendHeartbeatTimer",
    "access": "public",
    "description": "설정된 주기마다 heartbeat 메시지를 보내는 타이머",
    "lineNumber": 43,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "heartbeatTimeoutTimer",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#heartbeatTimeoutTimer",
    "access": "public",
    "description": "설정된 시간 동안 heartbeat를 받지 못하면 연결이 꾾어진 것으로 판정하는 타이머",
    "lineNumber": 51,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "receiveHeartbeat",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#receiveHeartbeat",
    "access": "private",
    "description": "heartbeat timeout을 취소하고 ready를 false로 설정합니다.",
    "lineNumber": 78,
    "params": [
      {
        "name": "sender",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "send",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#send",
    "access": "public",
    "description": "상대에게 메시지를 전송합니다.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "전송할 메시지."
      }
    ],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "close",
    "memberof": "js/signaler/LocalSignaler.js~LocalSignaler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/signaler/LocalSignaler.js~LocalSignaler#close",
    "access": "public",
    "description": "close 훅. Broadcast Channel을 닫습니다.",
    "lineNumber": 107,
    "params": [],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "js/signaler/index.js",
    "content": "export { default as SignalerBase } from './Base.js'\nexport { default as LocalSignaler } from './LocalSignaler.js'\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/signaler/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "js/util/IntervalTimer.js",
    "content": "/**\n * 리셋 가능한 interval.\n */\nexport default class IntervalTimer {\n  /**\n   * Timer 인스턴스를 생성합니다.\n   * `autoStart` 옵션이 `false`가 아니라면 자동으로 interval을 예약합니다.\n   * @param {Function} callback interval마다 실행할 함수\n   * @param {number} interval callback의 실행 간격(ms)\n   * @param {object} options\n   * @param {boolean} [options.autoStart] 자동으로 interval을 예약할지 결정\n   */\n  constructor (callback, interval, options) {\n    /**\n     * interval마다 실행할 함수\n     * @type {Function}\n     */\n    this.callback = callback\n\n    /**\n     * `this.callback`의 실행 간격(ms)\n     * @type {number}\n     */\n    this.interval = interval\n\n    /**\n     * `setInterval()`의 리턴값. `clearInterval()` 호출에 필요.\n     * @type {number}\n     */\n    this.intervalID = NaN\n\n    // 옵션 받기\n    this.options = {\n      autoStart: true\n    }\n    Object.assign(this.options, options)\n\n    if (this.options.autoStart) {\n      this.set()\n    }\n  }\n\n  /**\n   * 주기적으로 callback을 실행하는 interval을 예약합니다.\n   */\n  set () {\n    this.intervalID = setInterval(this.callback, this.interval)\n  }\n\n  /**\n   * 예약되어 있는 interval을 취소하고 재예약합니다.\n   */\n  reset () {\n    this.clear()\n    this.set()\n  }\n\n  /**\n   * 예약되어 있는 interval을 취소합니다.\n   */\n  clear () {\n    clearInterval(this.intervalID)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/IntervalTimer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "IntervalTimer",
    "memberof": "js/util/IntervalTimer.js",
    "static": true,
    "longname": "js/util/IntervalTimer.js~IntervalTimer",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/IntervalTimer.js",
    "importStyle": "IntervalTimer",
    "description": "리셋 가능한 interval.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#constructor",
    "access": "public",
    "description": "Timer 인스턴스를 생성합니다.\n`autoStart` 옵션이 `false`가 아니라면 자동으로 interval을 예약합니다.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "interval마다 실행할 함수"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "callback의 실행 간격(ms)"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.autoStart",
        "description": "자동으로 interval을 예약할지 결정"
      }
    ]
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "callback",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#callback",
    "access": "public",
    "description": "interval마다 실행할 함수",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "interval",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#interval",
    "access": "public",
    "description": "`this.callback`의 실행 간격(ms)",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "intervalID",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#intervalID",
    "access": "public",
    "description": "`setInterval()`의 리턴값. `clearInterval()` 호출에 필요.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "options",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#options",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"autoStart\": boolean}"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "set",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#set",
    "access": "public",
    "description": "주기적으로 callback을 실행하는 interval을 예약합니다.",
    "lineNumber": 46,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "reset",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#reset",
    "access": "public",
    "description": "예약되어 있는 interval을 취소하고 재예약합니다.",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "clear",
    "memberof": "js/util/IntervalTimer.js~IntervalTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/IntervalTimer.js~IntervalTimer#clear",
    "access": "public",
    "description": "예약되어 있는 interval을 취소합니다.",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "js/util/ListenerManager.js",
    "content": "/**\n * @typedef EventListenerEntry\n * @type {{\n *   evt: string,\n *   listener: EventListener\n * }}\n */\n\n/**\n * 이벤트 리스너들을 한번에 정리할 수 있도록 도와주는 매니저.\n */\nexport default class ListenerManager {\n  constructor () {\n    /** @type {Map<any, EventListenerEntry>} */\n    this.listeners = []\n  }\n\n  /**\n   * 이벤트 리스너를 추가합니다.\n   * @param {any} target 이벤트 리스너를 추가할 대상\n   * @param {string} evt 이벤트 이름\n   * @param {EventListener} listener 이벤트 리스너\n   * @param  {...any} args `addEventListener`에 전달할 추가 인수들\n   */\n  add (target, evt, listener, ...args) {\n    if ('addEventListener' in target) {\n      target.addEventListener(evt, listener, ...args)\n    } else if ('on' in target) {\n      target.on(evt, listener, ...args)\n    }\n\n    const entry = {\n      evt,\n      listener\n    }\n    this.listeners.push([target, entry])\n  }\n\n  /**\n   * 모든 이벤트 리스너들을 정리합니다.\n   */\n  clear () {\n    for (const [target, entry] of this.listeners) {\n      if ('removeEventListener' in target) {\n        target.removeEventListener(entry.evt, entry.listener)\n      } else if ('off' in target) {\n        target.off(entry.evt, entry.listener)\n      }\n    }\n    this.listeners.length = 0\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/ListenerManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "typedef",
    "name": "EventListenerEntry",
    "memberof": "js/util/ListenerManager.js",
    "static": true,
    "longname": "js/util/ListenerManager.js~EventListenerEntry",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "EventListenerEntry"
    }
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "ListenerManager",
    "memberof": "js/util/ListenerManager.js",
    "static": true,
    "longname": "js/util/ListenerManager.js~ListenerManager",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ListenerManager.js",
    "importStyle": "ListenerManager",
    "description": "이벤트 리스너들을 한번에 정리할 수 있도록 도와주는 매니저.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/ListenerManager.js~ListenerManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ListenerManager.js~ListenerManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "listeners",
    "memberof": "js/util/ListenerManager.js~ListenerManager",
    "static": false,
    "longname": "js/util/ListenerManager.js~ListenerManager#listeners",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Map<any, EventListenerEntry>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "add",
    "memberof": "js/util/ListenerManager.js~ListenerManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ListenerManager.js~ListenerManager#add",
    "access": "public",
    "description": "이벤트 리스너를 추가합니다.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "이벤트 리스너를 추가할 대상"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "evt",
        "description": "이벤트 이름"
      },
      {
        "nullable": null,
        "types": [
          "EventListener"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "이벤트 리스너"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "`addEventListener`에 전달할 추가 인수들"
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "clear",
    "memberof": "js/util/ListenerManager.js~ListenerManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ListenerManager.js~ListenerManager#clear",
    "access": "public",
    "description": "모든 이벤트 리스너들을 정리합니다.",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "js/util/Mitt.js",
    "content": "/**\n * developit의 Mitt 패키지에서 가져온 Mitt 클래스입니다.\n * Mitt: https://github.com/developit/Mitt\n */\n\n/*\nMIT License\n\nCopyright (c) 2021 Jason Miller\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n/**\n * @template T\n * @typedef {(payload: T, cancel?: () => void)} EventHandler\n */\n\n/**\n * 이벤트 이미터 기능을 제공하는 클래스.\n */\nexport default class Mitt {\n  constructor (all) {\n    /**\n     * 이벤트별 이벤트 핸들러들\n     * @type {Map<string|symbol, EventHandler<any>[]>}\n     */\n    this.all = all || new Map()\n  }\n\n  /**\n    * Register an event handler for the given type.\n    * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n    * @param {EventHandler<any>} handler Function to call in response to given event\n    */\n  on (type, handler) {\n    const handlers = this.all.get(type)\n    if (handlers) {\n      handlers.push(handler)\n    } else {\n      this.all.set(type, [handler])\n    }\n    return handler\n  }\n\n  /**\n     * Remove an event handler for the given type.\n     * If `handler` is omitted, all handlers of the given type are removed.\n     * @param {string|symbol} type Type of event to unregister `handler` from, or `'*'`\n     * @param {EventHandler<any>}} [handler] Handler function to remove\n     */\n  off (type, handler) {\n    const handlers = this.all.get(type)\n    if (handlers) {\n      if (handler) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1)\n      } else {\n        this.all.set(type, [])\n      }\n    }\n  }\n\n  once (type, handler) {\n    this.on(type, (evt, off) => {\n      off()\n      handler(evt, off)\n    })\n  }\n\n  /**\n     * Invoke all handlers for the given type.\n     * If present, `'*'` handlers are invoked after type-matched handlers.\n     *\n     * Note: Manually firing '*' handlers is not supported.\n     *\n     * @param {string|symbol} type The event type to invoke\n     * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n     */\n  emit (type, evt) {\n    let handlers = this.all.get(type)\n    if (handlers) {\n      handlers\n        .slice()\n        .map((handler) => {\n          const off = () => this.off(type, handler)\n          handler(evt, off)\n        })\n    }\n    handlers = this.all.get('*')\n    if (handlers) {\n      handlers\n        .slice()\n        .map((handler) => {\n          const off = () => this.off(type, handler)\n          handler(type, evt, off)\n        })\n    }\n  }\n\n  /**\n   * `on()` 메소드의 alias\n   * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n   * @param {EventHandler<any>} handler Function to call in response to given event\n   */\n  addEventListener (type, handler) {\n    return this.on(type, handler)\n  }\n\n  /**\n   * `off()` 메소드의 alias\n   * @param {string|symbol} type Type of event to unregister `handler` from, or `'*'`\n   * @param {EventHandler<any>} [handler] Handler function to remove\n   */\n  removeEventListener (type, handler) {\n    return this.off(type, handler)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/Mitt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "typedef",
    "name": "EventHandler",
    "memberof": "js/util/Mitt.js",
    "static": true,
    "longname": "js/util/Mitt.js~EventHandler",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@template",
        "tagValue": "T"
      }
    ],
    "type": {
      "types": [
        "payload: T, cancel?: () => void"
      ],
      "optional": false,
      "name": "EventHandler"
    }
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "Mitt",
    "memberof": "js/util/Mitt.js",
    "static": true,
    "longname": "js/util/Mitt.js~Mitt",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/Mitt.js",
    "importStyle": "Mitt",
    "description": "이벤트 이미터 기능을 제공하는 클래스.",
    "lineNumber": 38,
    "interface": false
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/Mitt.js~Mitt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "all",
    "memberof": "js/util/Mitt.js~Mitt",
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#all",
    "access": "public",
    "description": "이벤트별 이벤트 핸들러들",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Map<string|symbol, EventHandler<any>[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "on",
    "memberof": "js/util/Mitt.js~Mitt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#on",
    "access": "public",
    "description": "Register an event handler for the given type.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of event to listen for, or `'*'` for all events"
      },
      {
        "nullable": null,
        "types": [
          "EventHandler<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call in response to given event"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "off",
    "memberof": "js/util/Mitt.js~Mitt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#off",
    "access": "public",
    "description": "Remove an event handler for the given type.\nIf `handler` is omitted, all handlers of the given type are removed.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of event to unregister `handler` from, or `'*'`"
      },
      {
        "nullable": null,
        "types": [
          "EventHandler<any>}"
        ],
        "spread": false,
        "optional": true,
        "name": "handler",
        "description": "Handler function to remove"
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "once",
    "memberof": "js/util/Mitt.js~Mitt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#once",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "emit",
    "memberof": "js/util/Mitt.js~Mitt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#emit",
    "access": "public",
    "description": "Invoke all handlers for the given type.\nIf present, `'*'` handlers are invoked after type-matched handlers.\n\nNote: Manually firing '*' handlers is not supported.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The event type to invoke"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": true,
        "name": "evt",
        "description": "Any value (object is recommended and powerful), passed to each handler"
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "addEventListener",
    "memberof": "js/util/Mitt.js~Mitt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#addEventListener",
    "access": "public",
    "description": "`on()` 메소드의 alias",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of event to listen for, or `'*'` for all events"
      },
      {
        "nullable": null,
        "types": [
          "EventHandler<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call in response to given event"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "removeEventListener",
    "memberof": "js/util/Mitt.js~Mitt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Mitt.js~Mitt#removeEventListener",
    "access": "public",
    "description": "`off()` 메소드의 alias",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of event to unregister `handler` from, or `'*'`"
      },
      {
        "nullable": null,
        "types": [
          "EventHandler<any>"
        ],
        "spread": false,
        "optional": true,
        "name": "handler",
        "description": "Handler function to remove"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "js/util/ObservableEntry.js",
    "content": "import Queue from './Queue.js'\n\n/**\n * @template T\n */\nexport class ObservableEntry {\n  /**\n   * @param {T} val\n   */\n  constructor (val) {\n    this.val = val\n    this.conditions = new Set()\n    this.callbacks = new Map()\n  }\n\n  set (val) {\n    const changed = val !== this.val\n    this.val = val\n\n    if (changed) {\n      this.testConditionsAll()\n    }\n  }\n\n  get () {\n    return this.val\n  }\n\n  registerCallback (condition, matchedCallback, unmatchedCallback) {\n    // 있으면 있는 컨디션 이용\n    if (!this.conditions.has(condition)) {\n      this.conditions.add(condition)\n      this.callbacks.set(condition, new Set())\n    }\n\n    // condition에 추가\n    const callbackPairs = this.callbacks.get(condition)\n    const callbackPair = [matchedCallback, unmatchedCallback]\n    callbackPairs.add(callbackPair)\n\n    // 취소용 함수 리턴\n    return () => {\n      callbackPairs.delete(callbackPair)\n\n      // callbackPair를 가지지 않는 컨디션은 삭제\n      if (callbackPairs.size > 0) return\n      this.callbacks.delete(callbackPairs)\n      this.conditions.delete(condition)\n    }\n  }\n\n  testConditionsAll () {\n    for (const condition of this.conditions.values()) {\n      this.testCondition(condition)\n    }\n  }\n\n  testCondition (condition) {\n    const matched = condition(this.val)\n    for (const [matchedCallback, unmatchedCallback] of this.callbacks.get(condition)) {\n      if (matched) {\n        matchedCallback(this.val)\n      } else {\n        unmatchedCallback(this.val)\n      }\n    }\n  }\n}\n\nfunction waitToBeDefined (val) {\n  return val !== undefined\n}\n\nfunction waitToBeChanged () {\n  return true\n}\n\nexport class WaitEntry {\n  /**\n   * @param {object} param\n   * @param {ObservableEntry} param.observableEntry\n   * @param {Function} param.unmatchedCallback\n   * @param {boolean} param.once\n   */\n  constructor ({ observableEntry, unmatchedCallback = () => {}, once = true }) {\n    this.promiseCallbacks = new Queue()\n    this.resolved = false\n    this.once = true\n    this.cancel = () => {}\n\n    this.observableEntry = observableEntry\n    this.unmatchedCallback = unmatchedCallback\n    this.once = once\n  }\n\n  // thenable 구현\n  // reject 할일 없으므로 두번째 인수 안받음\n  then (fulfill) {\n    this.promiseCallbacks.push(fulfill)\n    if (this.resolved) this.resolve()\n  }\n\n  resolve (newVal) {\n    // once: false면 콜백 비우지 X\n    // while (this.promiseCallbacks.size > 0) {\n    //   const callback = this.promiseCallbacks.pop();\n    //   callback(newVal);\n    // }\n    for (const callback of this.promiseCallbacks) {\n      callback(newVal, this.cancel)\n    }\n\n    if (this.once) {\n      this.promiseCallbacks.flush()\n    }\n  }\n\n  // 사용 가능한 컨디션들\n  toFulfill (condition, checkImmediate = true) {\n    const conditionMetCallback = newVal => {\n      this.resolve(newVal)\n\n      if (this.once) {\n        this.cancel()\n        // promise처럼 작동할때처럼 필요, once === false인 경우 항상 resolved === false\n        this.resolved = true\n      }\n    }\n\n    if (checkImmediate) {\n      const currentVal = this.observableEntry.val\n      if (condition(currentVal)) conditionMetCallback(currentVal)\n    }\n\n    this.cancel = this.observableEntry.registerCallback(condition, conditionMetCallback, () => {\n      this.unmatchedCallback()\n    })\n\n    // then() 가능하게 하기 위해서\n    return this\n  }\n\n  toBe (expectedVal) {\n    return this.toFulfill((val) => val === expectedVal)\n  }\n\n  toBeDefined () {\n    return this.toFulfill(waitToBeDefined)\n  }\n\n  toBeChanged () {\n    return this.toFulfill(waitToBeChanged, false)\n  }\n\n  /**\n   * @deprecated\n   */\n  onChange (callback) {\n    this.toBeChanged().then(callback)\n  }\n}\n\nexport function wait (observableEntry) {\n  return new WaitEntry({ observableEntry })\n}\n\nexport function observe (observableEntry) {\n  return new WaitEntry({ observableEntry, once: false })\n}\n\nexport function waitAll (waitEntriesFn) {\n  let resolveFn\n  const promise = new Promise(resolve => {\n    resolveFn = resolve\n  })\n\n  // 각 waitEntry 별 resolve 여부 나타냄\n  /**\n   * @type {Map<WaitEntry, boolean>}\n   */\n  const waitEntries = new Set()\n  let fulfilledWaitEntries = 0\n\n  // waitEntry 받고...\n  waitEntriesFn(observableEntry => {\n    let resolved = false\n    const waitEntry = new WaitEntry({\n      observableEntry,\n      once: false,\n      unmatchedCallback: () => {\n        if (!resolved) return\n\n        resolved = false\n        fulfilledWaitEntries--\n      }\n    })\n\n    // 맞으면 fulfilledWaitEntry 추가\n    waitEntry.then(() => {\n      if (resolved) return\n\n      resolved = true\n      fulfilledWaitEntries++\n      if (fulfilledWaitEntries === waitEntries.size) {\n        // 정리\n        for (const entry of waitEntries.values()) {\n          entry.cancel()\n        }\n        resolveFn()\n      }\n    })\n\n    waitEntries.add(waitEntry)\n    return waitEntry\n  })\n\n  return promise\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/ObservableEntry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "class",
    "name": "ObservableEntry",
    "memberof": "js/util/ObservableEntry.js",
    "static": true,
    "longname": "js/util/ObservableEntry.js~ObservableEntry",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ObservableEntry.js",
    "importStyle": "{ObservableEntry}",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@template",
        "tagValue": "T"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 206,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "val",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#val",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "conditions",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#conditions",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "callbacks",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#callbacks",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "set",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#set",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "get",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#get",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "registerCallback",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#registerCallback",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "matchedCallback",
        "types": [
          "*"
        ]
      },
      {
        "name": "unmatchedCallback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "testConditionsAll",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#testConditionsAll",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "testCondition",
    "memberof": "js/util/ObservableEntry.js~ObservableEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~ObservableEntry#testCondition",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "condition",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "waitToBeDefined",
    "memberof": "js/util/ObservableEntry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/ObservableEntry.js~waitToBeDefined",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/ObservableEntry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "waitToBeChanged",
    "memberof": "js/util/ObservableEntry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/ObservableEntry.js~waitToBeChanged",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/ObservableEntry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "class",
    "name": "WaitEntry",
    "memberof": "js/util/ObservableEntry.js",
    "static": true,
    "longname": "js/util/ObservableEntry.js~WaitEntry",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ObservableEntry.js",
    "importStyle": "{WaitEntry}",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 219,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ObservableEntry"
        ],
        "spread": false,
        "optional": false,
        "name": "param.observableEntry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "param.unmatchedCallback",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "param.once",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "promiseCallbacks",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#promiseCallbacks",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "resolved",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#resolved",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "once",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#once",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "cancel",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#cancel",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "observableEntry",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#observableEntry",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "unmatchedCallback",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#unmatchedCallback",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "then",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#then",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "fulfill",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "resolve",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#resolve",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "newVal",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "toFulfill",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#toFulfill",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkImmediate",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "toBe",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#toBe",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "expectedVal",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "toBeDefined",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#toBeDefined",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "toBeChanged",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#toBeChanged",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "onChange",
    "memberof": "js/util/ObservableEntry.js~WaitEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableEntry.js~WaitEntry#onChange",
    "access": "public",
    "description": "",
    "lineNumber": 158,
    "deprecated": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "wait",
    "memberof": "js/util/ObservableEntry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/ObservableEntry.js~wait",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ObservableEntry.js",
    "importStyle": "{wait}",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "observableEntry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "observe",
    "memberof": "js/util/ObservableEntry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/ObservableEntry.js~observe",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ObservableEntry.js",
    "importStyle": "{observe}",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "observableEntry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "waitAll",
    "memberof": "js/util/ObservableEntry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/ObservableEntry.js~waitAll",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ObservableEntry.js",
    "importStyle": "{waitAll}",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "waitEntriesFn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "file",
    "name": "js/util/ObservableMap.js",
    "content": "import { ObservableEntry, WaitEntry } from './ObservableEntry.js'\n\nexport default class ObservableMap {\n  constructor () {\n    /**\n     * @type {Map<string, ObservableEntry>}\n     */\n    this.observableEntries = new Map()\n  }\n\n  get (key) {\n    const observableEntry = this.observableEntries.get(key)\n    return observableEntry.get()\n  }\n\n  set (key, val) {\n    if (!this.has(key)) {\n      this.observableEntries.set(key, new ObservableEntry())\n    }\n\n    const observableEntry = this.observableEntries.get(key)\n    observableEntry.set(val)\n    return this\n  }\n\n  delete (key) {\n    return this.observableEntries.delete(key)\n  }\n\n  has (key) {\n    return this.observableEntries.has(key)\n  }\n\n  wait (key) {\n    if (!this.has(key)) {\n      this.observableEntries.set(key, new ObservableEntry())\n    }\n\n    const observableEntry = this.observableEntries.get(key)\n    return new WaitEntry({ observableEntry })\n  }\n\n  clear () {\n    this.observableEntries.clear()\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/ObservableMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "class",
    "name": "ObservableMap",
    "memberof": "js/util/ObservableMap.js",
    "static": true,
    "longname": "js/util/ObservableMap.js~ObservableMap",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ObservableMap.js",
    "importStyle": "ObservableMap",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 241,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "observableEntries",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#observableEntries",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, ObservableEntry>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "get",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#get",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "set",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#set",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "delete",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#delete",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "has",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#has",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "wait",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#wait",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "clear",
    "memberof": "js/util/ObservableMap.js~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/ObservableMap.js~ObservableMap#clear",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "js/util/ObservableQueue.js",
    "content": "import Queue from './Queue.js'\nimport once from './once.js'\n\nexport default class ObservableQueue extends Queue {\n  async * pushes () {\n    let lastTail = 0\n\n    while (true) {\n      await once(this, 'push')\n\n      for (let i = lastTail; i < this.tail; i++) {\n        yield this.data[i]\n      }\n      lastTail = this.tail\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/ObservableQueue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "ObservableQueue",
    "memberof": "js/util/ObservableQueue.js",
    "static": true,
    "longname": "js/util/ObservableQueue.js~ObservableQueue",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/ObservableQueue.js",
    "importStyle": "ObservableQueue",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/util/Queue.js~Queue"
    ]
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "pushes",
    "memberof": "js/util/ObservableQueue.js~ObservableQueue",
    "generator": true,
    "async": true,
    "static": false,
    "longname": "js/util/ObservableQueue.js~ObservableQueue#pushes",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "js/util/Queue.js",
    "content": "import Mitt from './Mitt.js'\n\nexport default class Queue extends Mitt {\n  constructor () {\n    super()\n    this.head = 0\n    this.tail = 0\n    this.data = {}\n  }\n\n  push (val) {\n    const index = this.tail++\n    this.data[index] = val\n    this.emit('push', val)\n  }\n\n  pop () {\n    const index = this.head++\n    const val = this.data[index]\n    delete this.data[index]\n    return val\n  }\n\n  get size () {\n    return this.tail - this.head\n  }\n\n  * [Symbol.iterator] () {\n    for (let i = this.head; i < this.tail; i++) {\n      yield this.data[i]\n    }\n  }\n\n  flush () {\n    this.head = 0\n    this.tail = 0\n    this.data = {}\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/Queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "class",
    "name": "Queue",
    "memberof": "js/util/Queue.js",
    "static": true,
    "longname": "js/util/Queue.js~Queue",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/Queue.js",
    "importStyle": "Queue",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "js/util/Mitt.js~Mitt"
    ]
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Queue.js~Queue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "head",
    "memberof": "js/util/Queue.js~Queue",
    "static": false,
    "longname": "js/util/Queue.js~Queue#head",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "tail",
    "memberof": "js/util/Queue.js~Queue",
    "static": false,
    "longname": "js/util/Queue.js~Queue#tail",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "data",
    "memberof": "js/util/Queue.js~Queue",
    "static": false,
    "longname": "js/util/Queue.js~Queue#data",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "push",
    "memberof": "js/util/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Queue.js~Queue#push",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "pop",
    "memberof": "js/util/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Queue.js~Queue#pop",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "get",
    "name": "size",
    "memberof": "js/util/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Queue.js~Queue#size",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "js/util/Queue.js~Queue",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "js/util/Queue.js~Queue#[Symbol.iterator]",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "flush",
    "memberof": "js/util/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/Queue.js~Queue#flush",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "js/util/TimeoutTimer.js",
    "content": "/**\n * 리셋 가능한 timeout.\n */\nexport default class TimeoutTimer {\n  /**\n   * Timer 인스턴스를 생성합니다.\n   * `autoStart` 옵션이 `false`가 아니라면 자동으로 timeout을 예약합니다.\n   * @param {Function} callback interval마다 실행할 함수\n   * @param {number} interval callback의 실행 간격(ms)\n   * @param {object} options\n   * @param {boolean} [options.autoStart] 자동으로 timeout을 예약할지 결정\n   */\n  constructor (callback, timeout, options) {\n    /**\n     * interval마다 실행할 함수\n     * @type {Function}\n     */\n    this.callback = callback\n\n    /**\n     * `this.callback`의 실행 간격(ms)\n     * @type {number}\n     */\n    this.timeout = timeout\n\n    /**\n     * `setTimeout()`의 리턴값. `clearTimeout()` 호출에 필요.\n     * @type {number}\n     */\n    this.timeoutID = NaN\n\n    // 옵션 받기\n    this.options = {\n      autoStart: true\n    }\n    Object.assign(this.options, options)\n\n    if (this.options.autoStart) {\n      this.set()\n    }\n  }\n\n  /**\n   * 주기적으로 callback을 실행하는 timeout을 예약합니다.\n   */\n  set () {\n    this.timeoutID = setTimeout(this.callback, this.timeout)\n  }\n\n  /**\n   * 예약되어 있는 timeout을 취소하고 재예약합니다.\n   */\n  reset () {\n    this.clear()\n    this.set()\n  }\n\n  /**\n   * 예약되어 있는 timeout을 취소합니다.\n   */\n  clear () {\n    clearTimeout(this.timeoutID)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/TimeoutTimer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "TimeoutTimer",
    "memberof": "js/util/TimeoutTimer.js",
    "static": true,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/TimeoutTimer.js",
    "importStyle": "TimeoutTimer",
    "description": "리셋 가능한 timeout.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#constructor",
    "access": "public",
    "description": "Timer 인스턴스를 생성합니다.\n`autoStart` 옵션이 `false`가 아니라면 자동으로 timeout을 예약합니다.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "interval마다 실행할 함수"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "callback의 실행 간격(ms)"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.autoStart",
        "description": "자동으로 timeout을 예약할지 결정"
      }
    ]
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "callback",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#callback",
    "access": "public",
    "description": "interval마다 실행할 함수",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "timeout",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#timeout",
    "access": "public",
    "description": "`this.callback`의 실행 간격(ms)",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "timeoutID",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#timeoutID",
    "access": "public",
    "description": "`setTimeout()`의 리턴값. `clearTimeout()` 호출에 필요.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "options",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#options",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"autoStart\": boolean}"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "set",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#set",
    "access": "public",
    "description": "주기적으로 callback을 실행하는 timeout을 예약합니다.",
    "lineNumber": 46,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "reset",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#reset",
    "access": "public",
    "description": "예약되어 있는 timeout을 취소하고 재예약합니다.",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "clear",
    "memberof": "js/util/TimeoutTimer.js~TimeoutTimer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/util/TimeoutTimer.js~TimeoutTimer#clear",
    "access": "public",
    "description": "예약되어 있는 timeout을 취소합니다.",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "js/util/createLogger.js",
    "content": "let inGroup = false\nlet disabled = false\n\nconst methodToColorMap = {\n  debug: '#7f8c8d', // Gray\n  log: '#3498db', // Blue\n  warn: '#f39c12', // Yellow\n  error: '#c0392b', // Red\n  groupCollapsed: '#3498db', // Blue\n  groupEnd: null // No colored prefix on groupEnd\n}\n\n/**\n * 뱃지와 함께 로그를 찍습니다.\n * @param {'debug'|'log'|'warn'|'error'|'groupCollapsed'|'groupEnd'} method 사용할 로그 함수의 이름\n * @param {string} src 로그를 찍는 주체.\n * @param  {...any} args 찍을 로그의 내용들.\n */\nfunction log (method, src, ...args) {\n  if (disabled) return\n\n  // prefix 뱃지 만들기\n  const prefixStyle = [\n    `background: ${methodToColorMap[method]}`,\n    'border-radius: 0.5em',\n    'color: white',\n    'font-weight: bold',\n    'padding: 2px 0.5em'\n  ]\n\n  // group안에 있을때는 뱃지를 숨겨야 함\n  const logPrefix = inGroup ? [] : [`%c${src}`, prefixStyle.join(';')]\n\n  // 로그 찍기\n  console[method](...logPrefix, ...args)\n\n  if (method === 'groupCollapsed') {\n    inGroup = true\n  } else if (method === 'groupEnd') {\n    inGroup = false\n  }\n}\n\nexport default function createLogger (src) {\n  return {\n    debug: (...args) => log('debug', src, ...args),\n    log: (...args) => log('log', src, ...args),\n    warn: (...args) => log('warn', src, ...args),\n    error: (...args) => log('error', src, ...args),\n    groupCollapsed: (...args) => log('groupCollapsed', src, ...args),\n    groupEnd: (...args) => log('groupEnd', src, ...args)\n  }\n}\n\nexport function disableLog () {\n  disabled = true\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/createLogger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "inGroup",
    "memberof": "js/util/createLogger.js",
    "static": true,
    "longname": "js/util/createLogger.js~inGroup",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/createLogger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "disabled",
    "memberof": "js/util/createLogger.js",
    "static": true,
    "longname": "js/util/createLogger.js~disabled",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/createLogger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 280,
    "kind": "variable",
    "name": "methodToColorMap",
    "memberof": "js/util/createLogger.js",
    "static": true,
    "longname": "js/util/createLogger.js~methodToColorMap",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/createLogger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"debug\": string, \"log\": string, \"warn\": string, \"error\": string, \"groupCollapsed\": string, \"groupEnd\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 281,
    "kind": "function",
    "name": "log",
    "memberof": "js/util/createLogger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/createLogger.js~log",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/createLogger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "src",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "createLogger",
    "memberof": "js/util/createLogger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/createLogger.js~createLogger",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/createLogger.js",
    "importStyle": "createLogger",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"debug\": *, \"log\": *, \"warn\": *, \"error\": *, \"groupCollapsed\": *, \"groupEnd\": *}"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "disableLog",
    "memberof": "js/util/createLogger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/createLogger.js~disableLog",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/createLogger.js",
    "importStyle": "{disableLog}",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "js/util/eta.js",
    "content": "/**\n * legraphista의 simple-eta를 es module로 사용할 수 있도록 변형한 버전입니다.\n * simple-eta: https://github.com/legraphista/eta\n */\n\n/*\nMIT License\n\nCopyright (c) 2018 Ștefan-Gabriel Muscalu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nfunction makeLowPassFilter (RC) {\n  return function (previousOutput, input, dt) {\n    const alpha = dt / (dt + RC)\n    return previousOutput + alpha * (input - previousOutput)\n  }\n}\n\nfunction def (x, d) {\n  return (x === undefined || x === null) ? d : x\n}\n\nexport default function makeEta (options) {\n  options = options || {}\n  const max = def(options.max, 1)\n  const min = def(options.min, 0)\n  const autostart = def(options.autostart, true)\n  const ignoreSameProgress = def(options.ignoreSameProgress, false)\n\n  let rate = null\n  let lastTimestamp = null\n  let lastProgress = null\n\n  const filter = makeLowPassFilter(def(options.historyTimeConstant, 2.5))\n\n  function start () {\n    report(min)\n  }\n\n  function reset () {\n    rate = null\n    lastTimestamp = null\n    lastProgress = null\n    if (autostart) {\n      start()\n    }\n  }\n\n  function report (progress, timestamp) {\n    if (typeof timestamp !== 'number') {\n      timestamp = Date.now()\n    }\n\n    if (lastTimestamp === timestamp) { return }\n    if (ignoreSameProgress && lastProgress === progress) { return }\n\n    if (lastTimestamp === null || lastProgress === null) {\n      lastProgress = progress\n      lastTimestamp = timestamp\n      return\n    }\n\n    const deltaProgress = progress - lastProgress\n    const deltaTimestamp = 0.001 * (timestamp - lastTimestamp)\n    const currentRate = deltaProgress / deltaTimestamp\n\n    rate = rate === null\n      ? currentRate\n      : filter(rate, currentRate, deltaTimestamp)\n    lastProgress = progress\n    lastTimestamp = timestamp\n  }\n\n  function estimate (timestamp) {\n    if (lastProgress === null) { return Infinity }\n    if (lastProgress >= max) { return 0 }\n    if (rate === null) { return Infinity }\n\n    let estimatedTime = (max - lastProgress) / rate\n    if (typeof timestamp === 'number' && typeof lastTimestamp === 'number') {\n      estimatedTime -= (timestamp - lastTimestamp) * 0.001\n    }\n    return Math.max(0, estimatedTime)\n  }\n\n  function getRate () {\n    return rate === null ? 0 : rate\n  }\n\n  return {\n    start: start,\n    reset: reset,\n    report: report,\n    estimate: estimate,\n    rate: getRate\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/eta.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "makeLowPassFilter",
    "memberof": "js/util/eta.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/eta.js~makeLowPassFilter",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/eta.js",
    "importStyle": null,
    "description": "legraphista의 simple-eta를 es module로 사용할 수 있도록 변형한 버전입니다.\nsimple-eta: https://github.com/legraphista/eta",
    "lineNumber": 30,
    "params": [
      {
        "name": "RC",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "function",
    "name": "def",
    "memberof": "js/util/eta.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/eta.js~def",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/eta.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "makeEta",
    "memberof": "js/util/eta.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/eta.js~makeEta",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/eta.js",
    "importStyle": "makeEta",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"start\": *, \"reset\": *, \"report\": *, \"estimate\": *, \"rate\": *}"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "file",
    "name": "js/util/index.js",
    "content": "export { default as ListenerManager } from './ListenerManager.js'\nexport { default as Mitt } from './Mitt.js'\nexport { ObservableEntry, WaitEntry, wait, observe, waitAll } from './ObservableEntry.js'\nexport { default as once } from './once.js'\nexport { default as Queue } from './Queue.js'\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "file",
    "name": "js/util/once.js",
    "content": "export default function once (eeOrEventTarget, type) {\n  return new Promise(resolve => {\n    if ('once' in eeOrEventTarget) {\n      eeOrEventTarget.once(type, evt => {\n        resolve(evt)\n      })\n    } else if ('addEventListener' in eeOrEventTarget) {\n      eeOrEventTarget.addEventListener(type, evt => {\n        resolve(evt)\n      }, { once: true })\n    }\n  })\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/once.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "function",
    "name": "once",
    "memberof": "js/util/once.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/once.js~once",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/once.js",
    "importStyle": "once",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "eeOrEventTarget",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "file",
    "name": "js/util/prettyBytes.js",
    "content": "/**\n * sindresorhus의 pretty-bytes를 es module로 사용할 수 있도록 변형한 버전입니다.\n * pretty-bytes: https://github.com/sindresorhus/pretty-bytes\n */\n\n/*\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n'use strict'\n\nconst BYTE_UNITS = [\n  'B',\n  'kB',\n  'MB',\n  'GB',\n  'TB',\n  'PB',\n  'EB',\n  'ZB',\n  'YB'\n]\n\nconst BIBYTE_UNITS = [\n  'B',\n  'kiB',\n  'MiB',\n  'GiB',\n  'TiB',\n  'PiB',\n  'EiB',\n  'ZiB',\n  'YiB'\n]\n\nconst BIT_UNITS = [\n  'b',\n  'kbit',\n  'Mbit',\n  'Gbit',\n  'Tbit',\n  'Pbit',\n  'Ebit',\n  'Zbit',\n  'Ybit'\n]\n\nconst BIBIT_UNITS = [\n  'b',\n  'kibit',\n  'Mibit',\n  'Gibit',\n  'Tibit',\n  'Pibit',\n  'Eibit',\n  'Zibit',\n  'Yibit'\n]\n\n/*\n Formats the given number using `Number#toLocaleString`.\n - If locale is a string, the value is expected to be a locale-key (for example: `de`).\n - If locale is true, the system default locale is used for translation.\n - If no value for locale is specified, the number is returned unmodified.\n */\nconst toLocaleString = (number, locale, options) => {\n  let result = number\n  if (typeof locale === 'string' || Array.isArray(locale)) {\n    result = number.toLocaleString(locale, options)\n  } else if (locale === true || options !== undefined) {\n    result = number.toLocaleString(undefined, options)\n  }\n\n  return result\n}\n\nexport default (number, options) => {\n  if (!Number.isFinite(number)) {\n    throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`)\n  }\n\n  options = Object.assign({ bits: false, binary: false }, options)\n\n  const UNITS = options.bits\n    ? (options.binary ? BIBIT_UNITS : BIT_UNITS)\n    : (options.binary ? BIBYTE_UNITS : BYTE_UNITS)\n\n  if (options.signed && number === 0) {\n    return ` 0 ${UNITS[0]}`\n  }\n\n  const isNegative = number < 0\n  const prefix = isNegative ? '-' : (options.signed ? '+' : '')\n\n  if (isNegative) {\n    number = -number\n  }\n\n  let localeOptions\n\n  if (options.minimumFractionDigits !== undefined) {\n    localeOptions = { minimumFractionDigits: options.minimumFractionDigits }\n  }\n\n  if (options.maximumFractionDigits !== undefined) {\n    localeOptions = Object.assign({ maximumFractionDigits: options.maximumFractionDigits }, localeOptions)\n  }\n\n  if (number < 1) {\n    const numberString = toLocaleString(number, options.locale, localeOptions)\n    return prefix + numberString + ' ' + UNITS[0]\n  }\n\n  const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1)\n  number /= Math.pow(options.binary ? 1024 : 1000, exponent)\n\n  if (!localeOptions) {\n    number = number.toPrecision(3)\n  }\n\n  const numberString = toLocaleString(Number(number), options.locale, localeOptions)\n\n  const unit = UNITS[exponent]\n\n  return prefix + numberString + ' ' + unit\n}\n",
    "static": true,
    "longname": "/home/runner/work/rtc-engine/rtc-engine/js/util/prettyBytes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "name": "BYTE_UNITS",
    "memberof": "js/util/prettyBytes.js",
    "static": true,
    "longname": "js/util/prettyBytes.js~BYTE_UNITS",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/prettyBytes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "name": "BIBYTE_UNITS",
    "memberof": "js/util/prettyBytes.js",
    "static": true,
    "longname": "js/util/prettyBytes.js~BIBYTE_UNITS",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/prettyBytes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 294,
    "kind": "variable",
    "name": "BIT_UNITS",
    "memberof": "js/util/prettyBytes.js",
    "static": true,
    "longname": "js/util/prettyBytes.js~BIT_UNITS",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/prettyBytes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "name": "BIBIT_UNITS",
    "memberof": "js/util/prettyBytes.js",
    "static": true,
    "longname": "js/util/prettyBytes.js~BIBIT_UNITS",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/prettyBytes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 296,
    "kind": "function",
    "name": "toLocaleString",
    "memberof": "js/util/prettyBytes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/prettyBytes.js~toLocaleString",
    "access": "public",
    "export": false,
    "importPath": "rtc-engine/js/util/prettyBytes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "function",
    "name": "prettyBytes",
    "memberof": "js/util/prettyBytes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/util/prettyBytes.js~prettyBytes",
    "access": "public",
    "export": true,
    "importPath": "rtc-engine/js/util/prettyBytes.js",
    "importStyle": "prettyBytes",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# RTCEngine\n\n[![JavaScript Style Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)\n[![npm version](https://badge.fury.io/js/rtc-engine.svg)](https://badge.fury.io/js/rtc-engine)\n![npm bundle size](https://img.shields.io/bundlephobia/min/rtc-engine)\n\nWebRTC를 이용한 __데이터 전송__ 을 위한 라이브러리입니다. \n\n비디오와 오디오 전송을 주요 기능으로 하는 다른 라이브러리와 다르게 텍스트와 파일을 쉽게 전송하고 받을 수 있도록 하는걸 목표로 합니다.\n\n## 주의 사항\n최소 ES2020을 지원하는 브라우저에서만 작동합니다.\n\n## 주요 기능\n- 마음대로 구현할 수 있는 시그널러\n- 자동으로 연결하고 재연결\n- 한줄로 끝나는 새 채널 열기\n- 데이터 채널의 버퍼 자동 관리\n- WHATWG Stream을 이용해 대용량 파일 전송도 가능\n\n## 빠른 시작\n먼저 index.html과 index.js를 만드세요.\n\n```html\n<!-- index.html -->\n<script src=\"index.js\" type=\"module\"></script>\n```\n\n```javascript\n// index.js\nimport RTCEngine, { LocalSignaler } from 'https://jspm.dev/rtc-engine@1'\n\n// LocalSignaler는 두 탭 사이에서 연결을 형성하도록 도와줍니다.\nconst signaler = new LocalSignaler()\nconst engine = new RTCEngine(signaler)\n\n// 메시지를 주고받을 수 있는 소켓을 만듭니다.\nengine.socket('hello').then(socket => {\n  socket.on('data', data => {\n    console.log(data)\n  })\n  socket.write('helloo RTCEngine!')\n})\n```\n\n그다음 로컬 서버를 열어주세요.\n```\nnpx serve\n```\n\n그리고 `localhost`로 가서 index.html을 서로 다른 두 탭에서 열고 브라우저 콘솔을 열어보세요.\n서로 메시지를 주고 받은 모습을 볼 수 있을 겁니다.\n\n## 더 알아보기\nRTCEngine에 대해 더 자세히 알아보기 싶으면 [문서](https://quasar-kim.github.io/rtc-engine/docs)와 [데모](https://quasar-kim.github.io/rtc-engine/demo)를 둘러보세요!\n\n",
    "longname": "/home/runner/work/rtc-engine/rtc-engine/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"rtc-engine\",\n  \"version\": \"1.0.0-beta.2\",\n  \"description\": \"WebRTC를 이용한 데이터 전송을 위한 라이브러리\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Quasar-Kim/rtc-engine\"\n  },\n  \"main\": \"js/index.js\",\n  \"module\": \"js/index.js\",\n  \"exports\": {\n    \".\": \"./js/RTCEngine.js\",\n    \"./util\": \"./js/util/index.js\",\n    \"./signaler\": \"./js/signaler/index.js\"\n  },\n  \"jsdelivr\": \"dist/RTCEngine.min.js\",\n  \"unpkg\": \"dist/RTCEngine.min.js\",\n  \"scripts\": {\n    \"build\": \"rollup --config rollup.config.js\",\n    \"test:unit\": \"wtr --watch\",\n    \"test:coverage\": \"wtr --coverage\",\n    \"test:e2e\": \"mocha test/e2e/backend/*.test.mjs\",\n    \"lint\": \"eslint js/**/*.js\",\n    \"docs:serve\": \"eleventy --serve\"\n  },\n  \"author\": \"Quasar-Kim\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@11ty/eleventy\": \"^1.0.0\",\n    \"@11ty/eleventy-img\": \"^2.0.0\",\n    \"@11ty/eleventy-plugin-syntaxhighlight\": \"^4.0.0\",\n    \"@esm-bundle/chai\": \"^4.3.4-fix.0\",\n    \"@rollup/plugin-commonjs\": \"^21.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^13.0.6\",\n    \"@rollup/plugin-replace\": \"^3.0.0\",\n    \"@web/dev-server\": \"^0.1.30\",\n    \"@web/test-runner\": \"^0.13.27\",\n    \"chai\": \"^4.3.6\",\n    \"chai-spies\": \"^1.0.0\",\n    \"eleventy-plugin-toc\": \"^1.1.5\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.32.0\",\n    \"eslint-config-standard\": \"^16.0.3\",\n    \"eslint-plugin-import\": \"^2.25.3\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-promise\": \"^5.2.0\",\n    \"fs-extra\": \"^10.0.1\",\n    \"markdown-it-anchor\": \"^8.4.1\",\n    \"mocha\": \"^9.1.3\",\n    \"puppeteer\": \"^13.3.1\",\n    \"rollup\": \"^2.60.1\",\n    \"rollup-plugin-terser\": \"^7.0.2\",\n    \"serve\": \"^13.0.2\",\n    \"serve-handler\": \"^6.1.3\",\n    \"sinon\": \"^12.0.1\",\n    \"terser\": \"^5.10.0\"\n  }\n}\n",
    "longname": "/home/runner/work/rtc-engine/rtc-engine/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]